//$file${SMs::./Inc::remote.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: remote_SM.qm
// File:  ${SMs::./Inc::remote.h}
//
// This code has been generated by QM 7.0.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${SMs::./Inc::remote.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef remoteSM_H_
#define remoteSM_H_

//extern QHsm * const the_oven;

//$declare(SMs::INITIAL_FLAG_CONFIG)
//$declare${SMs} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${SMs::INITIAL_FLAG_CONFIG} ................................................
#define INITIAL_FLAG_CONFIG 0b00100110

//${SMs::CONN_INTERVAL_MIN} ..................................................
#define CONN_INTERVAL_MIN 200U

//${SMs::CONN_INTERVAL_MAX} ..................................................
#define CONN_INTERVAL_MAX 300U

//${SMs::CONN_RESPONDER_LATENCY} .............................................
#define CONN_RESPONDER_LATENCY 0U

//${SMs::CONN_TIMEOUT} .......................................................
#define CONN_TIMEOUT 500U

//${SMs::CONN_MIN_CE_LENGTH} .................................................
#define CONN_MIN_CE_LENGTH 0U

//${SMs::CONN_MAX_CE_LENGTH} .................................................
#define CONN_MAX_CE_LENGTH 0xffff

//${SMs::CONNECTION_HANDLE_INVALID} ..........................................
#define CONNECTION_HANDLE_INVALID (uint8_t)0x00u

//${SMs::SERVICE_HANDLE_INVALID} .............................................
#define SERVICE_HANDLE_INVALID (uint32_t)0x00u

//${SMs::CHARACTERISTIC_HANDLE_INVALID} ......................................
#define CHARACTERISTIC_HANDLE_INVALID (uint16_t)0x00u

//${SMs::SCAN_TIMEOUT} .......................................................
#define SCAN_TIMEOUT (1U * 5U * 1000U)

//${SMs::CONNECTION_TIMEOUT} .................................................
#define CONNECTION_TIMEOUT (1U * 3U * 1000U)

//${SMs::MAX_LED_INDEX} ......................................................
#define MAX_LED_INDEX (uint8_t)3U

//${SMs::RUNNING_TIMEOUT} ....................................................
#define RUNNING_TIMEOUT (1U * 10U * 1000U)

//${SMs::INVALID_ADDRESS_TYPE} ...............................................
#define INVALID_ADDRESS_TYPE 0xff

//${SMs::bt_remote} ..........................................................
typedef struct {
// protected:
    QMsm super;

// private:
    sl_status_t sc;
    uint16_t server_address;
    uint32_t led_control_service_handle;
    uint16_t led_conf_characteristic_handle;
    uint16_t changes_characteristic_handle;
    uint8_t connection_handle;
    uint8_t led_conf[MAX_LED_INDEX + 1U];
    uint8_t changes[3];
    uint8_t count;
    uint8_t current_led;
    uint8_t bonding_Handle;
    bd_addr address;
    uint8_t add_type;
} bt_remote;

// public:
void bt_remote_ctor(bt_remote * const me);

// private:
void bt_remote_reset_properties(bt_remote * const me);

// protected:
QState bt_remote_initial(bt_remote * const me, void const * const par);
QState bt_remote_INITIALIZING  (bt_remote * const me, QEvt const * const e);
extern QMState const bt_remote_INITIALIZING_s;
QState bt_remote_operational  (bt_remote * const me, QEvt const * const e);
QState bt_remote_operational_i(bt_remote * const me);
extern QMState const bt_remote_operational_s;
QState bt_remote_running  (bt_remote * const me, QEvt const * const e);
QState bt_remote_running_e(bt_remote * const me);
QState bt_remote_running_x(bt_remote * const me);
extern QMState const bt_remote_running_s;
QState bt_remote_scanning  (bt_remote * const me, QEvt const * const e);
QState bt_remote_scanning_e(bt_remote * const me);
QState bt_remote_scanning_x(bt_remote * const me);
extern QMState const bt_remote_scanning_s;
QState bt_remote_discoveryAndSetup  (bt_remote * const me, QEvt const * const e);
QState bt_remote_discoveryAndSetup_e(bt_remote * const me);
QState bt_remote_discoveryAndSetup_i(bt_remote * const me);
extern QMState const bt_remote_discoveryAndSetup_s;
QState bt_remote_Service_discovery  (bt_remote * const me, QEvt const * const e);
QState bt_remote_Service_discovery_e(bt_remote * const me);
extern QMState const bt_remote_Service_discovery_s;
QState bt_remote_characteristic_discovery  (bt_remote * const me, QEvt const * const e);
QState bt_remote_characteristic_discovery_e(bt_remote * const me);
extern QMState const bt_remote_characteristic_discovery_s;
QState bt_remote_notification_getting  (bt_remote * const me, QEvt const * const e);
QState bt_remote_notification_getting_e(bt_remote * const me);
extern QMState const bt_remote_notification_getting_s;
QState bt_remote_read_Led_conf  (bt_remote * const me, QEvt const * const e);
QState bt_remote_read_Led_conf_e(bt_remote * const me);
extern QMState const bt_remote_read_Led_conf_s;
QState bt_remote_openning  (bt_remote * const me, QEvt const * const e);
QState bt_remote_openning_e(bt_remote * const me);
QState bt_remote_openning_x(bt_remote * const me);
extern QMState const bt_remote_openning_s;
QState bt_remote_max_idle_state  (bt_remote * const me, QEvt const * const e);
QState bt_remote_max_idle_state_e(bt_remote * const me);
QState bt_remote_max_idle_state_x(bt_remote * const me);
extern QMState const bt_remote_max_idle_state_s;

//${SMs::bt_remote_inst} .....................................................
extern bt_remote bt_remote_inst;
//$enddecl${SMs} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$declare(SMs::bt_SPC51)
//$declare(SMs::remoteSM_ctor)

extern QMsm * const QMsm_bt_remote_p; // opaque pointer to the remoteSM HSM

#endif // HISTORY_H_
