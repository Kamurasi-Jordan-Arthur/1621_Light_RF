<?xml version="1.0" encoding="UTF-8"?>
<model version="7.0.1" links="0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <framework name="qpc"/>
 <package name="SMs" stereotype="0x02">
  <class name="remoteSM" superclass="qpc::QHsm">
   <attribute name="sc" type="sl_status_t" visibility="0x02" properties="0x00">
    <documentation>status return of run bt commands</documentation>
   </attribute>
   <attribute name="advertising_set_handle" type="uint8_t" visibility="0x02" properties="0x00">
    <code>0xff;</code>
   </attribute>
   <operation name="ctor" type="void" visibility="0x00" properties="0x00">
    <code>//remoteSM *me = &amp;remote_inst;
me-&gt;advertising_set_handle = 0xff;
QHsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;remoteSM_initial));</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1">
     <action>(void)par; // unused parameter</action>
     <initial_glyph conn="20,8,5,0,18,4">
      <action box="2,-6,18,6"/>
     </initial_glyph>
    </initial>
    <state name="OPERATIONAL">
     <tran trig="sl_bt_evt_system_boot_id">
      <action>me-&gt;sc = sl_bt_advertiser_create_set(&amp;me-&gt;advertising_set_handle);
app_assert_status(me-&gt;sc);

// Generate data for advertising
me-&gt;sc = sl_bt_legacy_advertiser_generate_data(me-&gt;advertising_set_handle,
                                         sl_bt_advertiser_general_discoverable);
app_assert_status(me-&gt;sc);


// Set advertising interval to 100ms.
me-&gt;sc = sl_bt_advertiser_set_timing(
                                    me-&gt;advertising_set_handle,
                                    160, // min. adv. interval (milliseconds * 1.6)
                                    160, // max. adv. interval (milliseconds * 1.6)
                                    0,   // adv. duration
                                    0);  // max. num. adv. events
app_assert_status(me-&gt;sc);

// Start advertising and enable connections.
me-&gt;sc = sl_bt_legacy_advertiser_start(me-&gt;advertising_set_handle,
                                 sl_bt_legacy_advertiser_connectable);
app_assert_status(me-&gt;sc);

app_log_info(&quot;Advertising....&quot;);</action>
      <tran_glyph conn="16,19,3,-1,21">
       <action box="0,-2,23,2"/>
      </tran_glyph>
     </tran>
     <tran trig="sl_bt_evt_connection_opened_id">
      <action>app_log_info(&quot;Connection Opened....&quot;);
</action>
      <tran_glyph conn="16,24,3,-1,26">
       <action box="0,-2,26,2"/>
      </tran_glyph>
     </tran>
     <tran trig="sl_bt_evt_connection_closed_id">
      <action>me-&gt;sc = sl_bt_legacy_advertiser_generate_data(me-&gt;advertising_set_handle,
                                         sl_bt_advertiser_general_discoverable);
app_assert_status(me-&gt;sc);

// Restart advertising after client has dime-&gt;sconnected.
me-&gt;sc = sl_bt_legacy_advertiser_start(me-&gt;advertising_set_handle,
                                 sl_bt_legacy_advertiser_connectable);

app_log_info(&quot;Connection Opened....&quot;);</action>
      <tran_glyph conn="16,28,3,-1,30">
       <action box="0,-2,28,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="16,12,46,33"/>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
  <directory name="./Scr">
   <file name="remoteSM.c">
    <text>#include &quot;em_common.h&quot;
#include &quot;app_assert.h&quot;
#include &quot;sl_bluetooth.h&quot;
#include &quot;app.h&quot;
#include &quot;qpc.h&quot;

#include &quot;remoteSM.h&quot;


$define(SMs::remote_inst)

//static ToastOven l_oven; // the only instance of the ToastOven class

// global-scope definitions -----------------------------------------
QHsm * const remote_inst_p = &amp;remote_inst.super; // the opaque pointer

$define(SMs::remoteSM)
//$define(SMs::remoteSM_ctor)</text>
   </file>
  </directory>
  <directory name="./Inc">
   <file name="remoteSM.h">
    <text>#ifndef remoteSM_H_
#define remoteSM_H_

//extern QHsm * const the_oven; // opaque pointer to the oven HSM


$declare(SMs::remoteSM)
//$declare(SMs::remoteSM_ctor)

extern QHsm * const remote_inst_p;

#endif // HISTORY_H_</text>
   </file>
  </directory>
  <attribute name="remote_inst" type="remoteSM" visibility="0x02" properties="0x00"/>
 </package>
</model>
