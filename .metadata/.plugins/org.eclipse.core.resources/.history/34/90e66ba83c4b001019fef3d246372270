//$file${SMs::./Inc::remoteSM.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: remote_SM.qm
// File:  ${SMs::./Inc::remoteSM.h}
//
// This code has been generated by QM 7.0.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${SMs::./Inc::remoteSM.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef remoteSM_H_
#define remoteSM_H_

//extern QHsm * const the_oven;

//$declare(SMs::INITIAL_FLAG_CONFIG)
//$declare${SMs} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${SMs::remoteSM} ...........................................................
typedef struct {
// protected:
    QHsm super;

// private:
    sl_status_t sc;
    uint8_t advertising_set_handle;
    bd_addr address;
    uint8_t address_type;
    uint8_t system_id[8];
} remoteSM;

// public:
void remoteSM_ctor(remoteSM * const me);

// protected:
QState remoteSM_initial(remoteSM * const me, void const * const par);
QState remoteSM_INITIALIZING(remoteSM * const me, QEvt const * const e);
QState remoteSM_ADVERTISING(remoteSM * const me, QEvt const * const e);
QState remoteSM_MANAGING_CONNECTION(remoteSM * const me, QEvt const * const e);

//${SMs::remote_inst} ........................................................
extern remoteSM remote_inst;

//${SMs::INITIAL_FLAG_CONFIG} ................................................
#define INITIAL_FLAG_CONFIG 0b00101010

//${SMs::CONN_INTERVAL_MIN} ..................................................
#define CONN_INTERVAL_MIN 80U

//${SMs::CONN_INTERVAL_MAX} ..................................................
#define CONN_INTERVAL_MAX 80U

//${SMs::CONN_RESPONDER_LATENCY} .............................................
#define CONN_RESPONDER_LATENCY 0U

//${SMs::CONN_TIMEOUT} .......................................................
#define CONN_TIMEOUT 100U

//${SMs::CONN_MIN_CE_LENGTH} .................................................
#define CONN_MIN_CE_LENGTH 0U

//${SMs::CONN_MAX_CE_LENGTH} .................................................
#define CONN_MAX_CE_LENGTH 0xffff
//$enddecl${SMs} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$declare${SMs::remoteSM} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${SMs::remoteSM} ...........................................................
typedef struct {
// protected:
    QHsm super;

// private:
    sl_status_t sc;
    uint8_t advertising_set_handle;
    bd_addr address;
    uint8_t address_type;
    uint8_t system_id[8];
} remoteSM;

// public:
void remoteSM_ctor(remoteSM * const me);

// protected:
QState remoteSM_initial(remoteSM * const me, void const * const par);
QState remoteSM_INITIALIZING(remoteSM * const me, QEvt const * const e);
QState remoteSM_ADVERTISING(remoteSM * const me, QEvt const * const e);
QState remoteSM_MANAGING_CONNECTION(remoteSM * const me, QEvt const * const e);
//$enddecl${SMs::remoteSM} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$declare(SMs::remoteSM_ctor)

extern QHsm * const remote_inst_p; // opaque pointer to the remoteSM HSM

#endif // HISTORY_H_
